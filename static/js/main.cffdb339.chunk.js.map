{"version":3,"sources":["firebase.js","components/Modal.js","components/Header.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Modal","props","toggleModal","showInfo","className","onClick","Header","Footer","App","handleClick","randomGame","state","games","Math","floor","random","length","setState","showGame","showModal","database","ref","child","on","snapshot","newState","data","val","key","push","this","img","developer","title","released","platforms","src","style","width","height","info","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8QAcEA,IAASC,cAVc,CACrBC,OAAQ,0CACRC,WAAY,oCACZC,YAAa,2CACbC,UAAW,oBACXC,cAAe,gCACfC,kBAAmB,eACnBC,MAAO,8CAKMR,QAAf,ECGaS,EAhBD,SAACC,GAAW,IAEpBC,EAEED,EAFFC,YACAC,EACEF,EADFE,SAGF,OACE,yBAAKC,UAAU,SACX,yBAAKA,UAAU,WACb,2BAAID,GACJ,4BAAQE,QAASH,GAAjB,qBCFGI,EATA,SAACL,GACZ,OACI,gCACI,sDACA,gGCIGM,EARA,SAACN,GACZ,OACI,gCACI,wDC+FGO,G,wDA3Fb,WAAYP,GAAO,IAAD,8BAChB,cAAMA,IA2BRQ,YAAc,WACZ,IAAIC,EAAa,EAAKC,MAAMC,MAAMC,KAAKC,MAAMD,KAAKE,SAAW,EAAKJ,MAAMC,MAAMI,SAC9E,EAAKC,SAAS,CACZC,SAAUR,EACVS,WAAW,KAhCG,EAoClBjB,YAAc,WACZ,EAAKe,SAAS,CACZE,WAAY,EAAKR,MAAMQ,aApCzB,EAAKR,MAAQ,CACXC,MAAO,GACPM,SAAU,GACVC,WAAW,GALG,E,gEASE,IAAD,OACH5B,EAAS6B,WAAWC,MACZC,MAAM,SAEpBC,GAAG,SAAS,SAACC,GACnB,IAAMC,EAAW,GACXC,EAAOF,EAASG,MAEtB,IAAK,IAAIC,KAAOF,EACdD,EAASI,KAAKH,EAAKE,IAGrB,EAAKX,SAAS,CACZL,MAAOa,S,+BAoBH,IAAD,EAOJK,KAAKnB,MAAMO,SALba,EAFM,EAENA,IACAC,EAHM,EAGNA,UACAC,EAJM,EAINA,MACAC,EALM,EAKNA,SACAC,EANM,EAMNA,UAIAhB,EACEW,KAAKnB,MADPQ,UAQD,OACE,yBAAKf,UAAU,OACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,WACb,yBAAKA,UAAU,WACb,4BAAQC,QAAUyB,KAAKrB,aAAvB,aACA,yBACE2B,IAAML,EACNM,MAAQN,GAbF,CAChBO,MAAO,IACPC,OAAQ,OAaA,yBAAKnC,UAAU,YACb,2BAAG,wCAAH,IAAyB6B,GACzB,2BAAG,4CAAH,IAA6BD,GAC7B,2BAAG,4CAAH,IAA6BG,GAC7B,2BAAG,2CAAH,IAA4BD,GAC5B,4BAAQ7B,QAAUyB,KAAK5B,aAAvB,cAEAiB,GACF,kBAAC,EAAD,CACEjB,YAAc4B,KAAK5B,YACnBC,SAAW2B,KAAKnB,MAAMO,SAASsB,QAGnC,kBAAC,EAAD,Y,GApFQC,cCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.cffdb339.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/database';\n\n  // Your web app's Firebase configuration\n  const firebaseConfig = {\n    apiKey: \"AIzaSyBAS43lg_WI123l9Z9of_CAKI0hPh2iyOM\",\n    authDomain: \"rpg-generator-app.firebaseapp.com\",\n    databaseURL: \"https://rpg-generator-app.firebaseio.com\",\n    projectId: \"rpg-generator-app\",\n    storageBucket: \"rpg-generator-app.appspot.com\",\n    messagingSenderId: \"484600857550\",\n    appId: \"1:484600857550:web:78f4db991a49718e5fe19f\"\n  };\n  // Initialize Firebase\n  firebase.initializeApp(firebaseConfig);\n\n  export default firebase;","import React, { Component } from 'react'\n\n\nconst Modal = (props) => {\n    const {\n      toggleModal,\n      showInfo\n    } = props\n    \n    return (\n      <div className=\"modal\">\n          <div className=\"wrapper\"> \n            <p>{showInfo}</p>\n            <button onClick={toggleModal}>Click to Close</button>\n          </div>\n      </div>\n    )\n  }\n\nexport default Modal","import React, { Component } from 'react';\n\nconst Header = (props) => {\n    return (\n        <header>\n            <h1>Random JRPG Generator!</h1>\n            <p>Click the button to suggest a Japanese Role Playing Game (JRPG)</p>\n        </header>\n    )\n  }\n\nexport default Header","import React, { Component } from 'react';\n\nconst Footer = (props) => {\n    return (\n        <footer>\n            <p>Created by Clayton Puno</p>\n        </footer>\n    )\n  }\n\nexport default Footer","import React, { Component } from 'react';\nimport firebase from './firebase';\nimport Modal from './components/Modal';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport './App.css';\n\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      games: [],\n      showGame: {},\n      showModal: false\n    }\n  }\n\n  componentDidMount(){\n    const dbRef = firebase.database().ref();\n    const dbGames = dbRef.child(\"games\")\n\n    dbGames.on('value', (snapshot) => {\n      const newState = [];\n      const data = snapshot.val();\n\n      for (let key in data) {\n        newState.push(data[key]);\n      }\n\n      this.setState({\n        games: newState\n      })\n    })\n\n  }\n\n  handleClick = () => {\n    let randomGame = this.state.games[Math.floor(Math.random() * this.state.games.length)]\n    this.setState({\n      showGame: randomGame,\n      showModal: false\n    })\n  }\n\n  toggleModal = () => {\n    this.setState({ \n      showModal: !this.state.showModal,\n    })\n  }\n\n  render() {\n   const {\n     img,\n     developer,\n     title,\n     released,\n     platforms\n   } = this.state.showGame\n\n   const {\n     showModal\n   } = this.state\n\n   const imgStyle = {\n    width: 250,\n    height: 350,\n  }\n\n    return (\n      <div className=\"App\">\n        <Header />\n        <div className=\"wrapper\">\n          <div className=\"content\">\n            <button onClick={ this.handleClick } >Next Game</button>\n            <img\n              src={ img }\n              style={ img && imgStyle }\n            />\n            <div className=\"text-box\">\n              <p><span>Title:</span> { title }</p>\n              <p><span>Developer:</span> { developer }</p>\n              <p><span>Platforms:</span> { platforms }</p>\n              <p><span>Released:</span> { released }</p>\n              <button onClick={ this.toggleModal }>More Info</button>\n            </div>\n            { showModal && \n            <Modal \n              toggleModal={ this.toggleModal } \n              showInfo={ this.state.showGame.info }\n            /> }\n          </div>\n          <Footer />\n        </div>\n        \n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}